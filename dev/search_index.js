var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = BosonStrings","category":"page"},{"location":"#BosonStrings","page":"Home","title":"BosonStrings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BosonStrings.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [BosonStrings]","category":"page"},{"location":"#BosonStrings.Operator","page":"Home","title":"BosonStrings.Operator","text":"Represent an normal ordered boson operator Each key is a\n\n\n\n\n\n","category":"type"},{"location":"#Base.:*-Tuple{Operator, Operator}","page":"Home","title":"Base.:*","text":"Base.:*(o1::Operator, o2::Operator)\n\nMultiplication of two operators. Only supports single boson operator for now.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:+-Tuple{Matrix{T} where T, Tuple{Number, Tuple{Int64, Int64}}}","page":"Home","title":"Base.:+","text":"Base.:+(o::Matrix, term::Tuple{Number, Tuple{Int,Int} })\n\nAdd a term to a dense matrix operator. To add a term of the form c*(†n)(m), do o+=c,n,m\n\n\n\n\n\n","category":"method"},{"location":"#Base.:+-Tuple{Operator, Operator}","page":"Home","title":"Base.:+","text":"Base.:+(o1::Operator, o2::Operator)\nBase.:+(o::Operator, a::Number)\nBase.:+(a::Number, o::Operator)\n\nAddition between operators and numbers\n\n\n\n\n\n","category":"method"},{"location":"#Base.:+-Tuple{Operator, Tuple{Number, Vararg{Tuple{Int64, Int64, Int64}, N} where N}}","page":"Home","title":"Base.:+","text":"Base.:+(o::Operator, term::Tuple{Number, Vararg{Tuple{Int,Int,Int}} })\n\nAdd a term to an operator. The term is of the form c, (site1, n1, m1), (site2, n2, m2) ... where triplets (site, n, m) represent a_site^dagger n a_site^m. The following example adds the term a_1^dagger 1 a_1^1    a_2^dagger 2 a_2^3    a_4^dagger 5 a_4^5 to a 4-bosons operator:\n\no = Operator(4)\no += 1, (1, 1, 1), (2, 2, 3), (4, 5, 5)\n\njulia> o\n(1.0 + 0.0im) (†1)(1)·(†2)(3)·(†0)(0)·(†5)(5)\n\n\n\n\n\n","category":"method"},{"location":"#Base.:--Tuple{Operator}","page":"Home","title":"Base.:-","text":"Base.:-(o::Operator)\nBase.:-(o1::Operator, o2::Operator)\nBase.:-(o::Operator, a::Number)\nBase.:-(a::Number, o::Operator)\n\nSubtraction between operators and numbers\n\n\n\n\n\n","category":"method"},{"location":"#Base.:/-Tuple{Operator, Number}","page":"Home","title":"Base.:/","text":"Base.:/(o::Operator, a::Number)\n\nDivide an operator by a number\n\n\n\n\n\n","category":"method"},{"location":"#Base.show-Tuple{IO, Operator}","page":"Home","title":"Base.show","text":"Base.show(io::IO, o::Operator)\n\nPrint an operator in a human-readable format. The operator is printed as a sum of terms, each term is a coefficient followed by a string of boson operators.\n\n\n\n\n\n","category":"method"},{"location":"#BosonStrings.annihilation-Tuple{Int64}","page":"Home","title":"BosonStrings.annihilation","text":"annihilation(d::Int)\n\nCreate a d x d annihilation operator, dense matrix.\n\n\n\n\n\n","category":"method"},{"location":"#BosonStrings.equal-Tuple{Operator, Operator}","page":"Home","title":"BosonStrings.equal","text":"equal(o1, o2; tol=1e-10)\n\nCompare two operators. Return true if they are equal within the tolerance tol.\n\n\n\n\n\n","category":"method"},{"location":"#BosonStrings.inner-Tuple{Int64, Matrix{T} where T, Int64}","page":"Home","title":"BosonStrings.inner","text":"inner(n::Int, o::Matrix, m::Int)\n\nReturn <n|o|m> where o is a single boson operator represented as a dense matrix.\n\n\n\n\n\n","category":"method"},{"location":"#BosonStrings.inner-Tuple{Int64, Operator, Int64}","page":"Home","title":"BosonStrings.inner","text":"inner(n::Int, o::Operator, m::Int)\n\nReturn <n|o|m> where |n> and |m> are foch states.\n\n\n\n\n\n","category":"method"},{"location":"#BosonStrings.ione-Tuple{Operator}","page":"Home","title":"BosonStrings.ione","text":"return the index of the 1 string\n\n\n\n\n\n","category":"method"},{"location":"#BosonStrings.op_to_dense-Tuple{Operator, Int64}","page":"Home","title":"BosonStrings.op_to_dense","text":"op_to_dense(o::Operator, dim::Int)\n\nConvert a boson Operator to a dense matrix of dimention dim.\n\n\n\n\n\n","category":"method"}]
}
